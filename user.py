import re
import bcrypt
import random
import string

from db import db

#users = {}

# a registered user
class User:
	def __init__(self, u):
                self.id = u['user_id']
                self.name = u['user_name']
                self.passwd_hash = u['user_passwd']
                self.is_guest = False

        def set_passwd(self, passwd):
                self.passwd_hash = bcrypt.hashpw(passwd, bcrypt.gensalt())
                db.set_user_passwd(self.id, self.passwd_hash)
        
        def set_admin_level(self, level):
                db.set_user_admin_level(self.id, level)
        
        # check if an unencrypted password is correct
        def check_passwd(self, passwd):
                # don't perform expensive computation on arbitrarily long data
                if len(passwd) > 32:
                        return False
                return bcrypt.hashpw(passwd, self.passwd_hash) == self.passwd_hash

class GuestUser:
        def __init__(self, name):
                self.is_guest = True
                if name == None:
                        self.name = 'Guest'
                        for i in range(4):
                                self.name = self.name + random.choice(string.ascii_uppercase)
                        self.autogenerated_name = True
                else:
                        self.name = name
                        self.autogenerated_name = False

class UsernameException(Exception):
        def __init__(self, reason):
                self.reason = reason

def get_by_name(name):
        if name.lower() == 'g' or name.lower() == 'guest':
                return GuestUser(None)
        elif not re.match('^[a-zA-Z_]+$', name):
                raise UsernameException('Sorry, names can only consist of lower and upper case letters.  Try again.')
        elif len(name) < 3:
                raise UsernameException('A name should be at least %d characters long!  Try again.' % 3)
        elif len(name) > 18:
                raise UsernameException("Sorry, names may be at most %d characters long.  Try again." % 18)

        print "here-1 %s" % name
        u = db.get_user(name)
        if u:
                return User(u)
        else:
                return GuestUser(name)

# vim: expandtab tabstop=8 softtabstop=8 shiftwidth=8 smarttab autoindent ft=python
